name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Check for Act environment
        id: check-act
        run: |
          if [ -n "$ACT" ]; then
            echo "Running in Act environment"
            echo "is_act=true" >> $GITHUB_OUTPUT
          else
            echo "Running in GitHub Actions"
            echo "is_act=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          # Explicitly define the cache key prefix to avoid cache key issues
          prefix-key: "v1-rust"
      - name: Build Linux version
        run: cargo build --release
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: target/release/job_tracker
          retention-days: 7

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Check for Act environment
        id: check-act
        shell: bash
        run: |
          if [ -n "$ACT" ]; then
            echo "Running in Act - skipping Windows build"
            echo "is_act=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Running in GitHub Actions"
            echo "is_act=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        if: steps.check-act.outputs.is_act != 'true'
      - name: Install Rust toolchain
        if: steps.check-act.outputs.is_act != 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        if: steps.check-act.outputs.is_act != 'true'
        with:
          # Explicitly define the cache key prefix to avoid cache key issues
          prefix-key: "v1-rust"
      - name: Build Windows version
        if: steps.check-act.outputs.is_act != 'true'
        run: cargo build --release
      - name: Upload Windows Artifacts
        if: steps.check-act.outputs.is_act != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: target/release/job_tracker.exe
          retention-days: 7

  build-appimage:
    # Updated from ubuntu-20.04 to ubuntu-22.04 due to upcoming deprecation
    runs-on: ubuntu-22.04
    needs: [build-linux]
    steps:
      - name: Check for Act environment
        id: check-act
        run: |
          if [ -n "$ACT" ]; then
            echo "Running in Act - skipping AppImage build"
            echo "is_act=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Running in GitHub Actions"
            echo "is_act=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        if: steps.check-act.outputs.is_act != 'true'
      - name: Download Linux Artifact
        if: steps.check-act.outputs.is_act != 'true'
        uses: actions/download-artifact@v4
        with:
          name: linux-binary
          path: appdir/usr/bin
      - name: Install AppImage dependencies
        if: steps.check-act.outputs.is_act != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 desktop-file-utils
      - name: Install AppImage tools
        if: steps.check-act.outputs.is_act != 'true'
        run: |
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
          chmod +x appimagetool
      - name: Prepare AppDir structure
        if: steps.check-act.outputs.is_act != 'true'
        run: |
          mkdir -p appdir/usr/share/applications
          mkdir -p appdir/usr/share/icons/hicolor/256x256/apps
          mkdir -p appdir/usr/share/metainfo
          
          # Make the binary executable
          chmod +x appdir/usr/bin/job_tracker
          
          # Create desktop file with proper application ID
          cat > appdir/usr/share/applications/com.coleleavitt.jobtracker.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Job Tracker
          Exec=job_tracker
          Icon=com.coleleavitt.jobtracker
          Categories=Office;Utility;
          Comment=Track your job applications
          Terminal=false
          StartupNotify=true
          EOF
          
          # Validate desktop file
          desktop-file-validate appdir/usr/share/applications/com.coleleavitt.jobtracker.desktop
          
          # Copy desktop file to root with correct name
          cp appdir/usr/share/applications/com.coleleavitt.jobtracker.desktop appdir/
          
          # Create AppStream metadata
          cat > appdir/usr/share/metainfo/com.coleleavitt.jobtracker.appdata.xml << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <component type="desktop-application">
            <id>com.coleleavitt.jobtracker</id>
            <name>Job Tracker</name>
            <summary>Track your job applications</summary>
            <description>
              <p>Job Tracker helps you manage and track your job applications during your job search.</p>
            </description>
            <categories>
              <category>Office</category>
              <category>Utility</category>
            </categories>
            <url type="homepage">https://github.com/coleleavitt/job-tracker</url>
            <provides>
              <binary>job_tracker</binary>
            </provides>
            <releases>
              <release version="1.0.0" date="2025-04-05"/>
            </releases>
          </component>
          EOF
          
          # Create a simple icon
          cat > appdir/usr/share/icons/hicolor/256x256/apps/com.coleleavitt.jobtracker.svg << EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="256" height="256" viewBox="0 0 256 256">
            <rect width="256" height="256" fill="#292D3E" rx="20" ry="20"/>
            <text x="128" y="128" font-family="Arial" font-size="40" text-anchor="middle" fill="#FFFFFF">JT</text>
          </svg>
          EOF
          
          # Copy the icon to the root with the correct name
          cp appdir/usr/share/icons/hicolor/256x256/apps/com.coleleavitt.jobtracker.svg appdir/com.coleleavitt.jobtracker.svg
          
          # Create an AppRun file (wrapper script)
          cat > appdir/AppRun << EOF
          #!/bin/bash
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/job_tracker" "\$@"
          EOF
          
          chmod +x appdir/AppRun
      - name: Build AppImage
        if: steps.check-act.outputs.is_act != 'true'
        run: |
          # Use the ARCH environment variable to specify the architecture
          ARCH=x86_64 ./appimagetool -v appdir/ Job_Tracker-x86_64.AppImage
      - name: Upload AppImage Artifact
        if: steps.check-act.outputs.is_act != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: appimage
          path: Job_Tracker-x86_64.AppImage
          retention-days: 7

  create-release:
    needs: [build-linux, build-windows, build-appimage]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-binary
          path: linux-binary
      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-binary
          path: windows-binary
      - name: Download AppImage Artifact
        uses: actions/download-artifact@v4
        with:
          name: appimage
          path: appimage
      - name: Make binaries executable
        run: |
          chmod +x linux-binary/job_tracker
          [ -f appimage/Job_Tracker-x86_64.AppImage ] && chmod +x appimage/Job_Tracker-x86_64.AppImage
      - name: List Files
        run: |
          echo "Downloaded files:"
          find . -type f | sort
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-binary/job_tracker
            windows-binary/job_tracker.exe
            appimage/Job_Tracker-x86_64.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
